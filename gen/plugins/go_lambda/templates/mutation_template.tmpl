import "fmt"

// {{$.Object.NameTitle}} is a struct representing the graphql object {{$.Object.NameTitle}}
type {{$.Object.NameTitle}} struct {
	Arguments {{$.Object.NameTitle}}Arguments `json:"arguments"`
	Identity  RequestIdentity       `json:"identity"`
}

type {{$.Object.NameTitle}}Arguments struct {
	{{- range $index, $field := $.Fields}}
		{{$field.GoFieldName}} {{$field.GoType}} {{$field.Tag}}
	{{- end}}
}

//Validate validates the {{$.Object.NameTitle}} struct
func ({{$.Object.NameCamel}} *{{$.Object.NameTitle}}Arguments) Validate() error {
	if {{$.Object.NameCamel}} == nil {
		return fmt.Errorf("{{$.Object.NameTitle}} must not be nil")
	}
	{{- range $index, $field := $.Fields}}
		{{- if and $field.Collection $field.IsCollectionOfObjects}}
			{{if eq $field.Required false }}
				if {{$.Object.NameCamel}}.{{$field.GoFieldName}} != nil && len(*{{$.Object.NameCamel}}.{{$field.GoFieldName}}) != 0 {
					for _, item := range *{{$.Object.NameCamel}}.{{$field.GoFieldName}} {
						if err := item.Validate(); err != nil {
							return err
						}
					}
				}
			{{else}}
				if len({{$.Object.NameCamel}}.{{$field.GoFieldName}}) != 0 {
					for _, item := range {{$.Object.NameCamel}}.{{$field.GoFieldName}} {
						if err := item.Validate(); err != nil {
							return err
						}
					}
				}
			{{end}}
		{{- else }}
			{{- if eq $field.Required true }}
				{{- if or (eq $field.Kind "String") (eq $field.Kind "ID") }}
					if {{$.Object.NameCamel}}.{{$field.GoFieldName}} == "" {
						return fmt.Errorf("field {{$field.Name}} is required")
					}
				{{- else if or (eq $field.Kind "Int") (eq $field.Kind "Float") }}
					if {{$.Object.NameCamel}}.{{$field.GoFieldName}} == 0 {
						return fmt.Errorf("field {{$field.Name}} is required")
					}
				{{- else }}
					// WARNING: Cannot validate required field {{$field.GoFieldName}}
				{{- end }}
			{{- end}}
		{{- end}}
	{{- end}}
	return nil
}