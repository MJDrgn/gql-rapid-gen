

resource "aws_iam_role" "appsync-lambda-{{$.Parent}}-{{$.Field.Name}}" {
  name = "appsync-lambda-{{$.Parent}}-{{$.Field.Name}}-${terraform.workspace}"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "appsync.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "appsync-lambda-{{$.Parent}}-{{$.Field.Name}}" {
  name = "appsync-lambda-{{$.Parent}}-{{$.Field.Name}}-${terraform.workspace}"
  role = aws_iam_role.appsync-lambda-{{$.Parent}}-{{$.Field.Name}}.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "lambda:InvokeFunction"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_lambda_function.{{$.Parent}}-{{$.Field.Name}}.arn}"
      ]
    }
  ]
}
EOF
}

resource "aws_iam_role" "lambda-{{$.Parent}}-{{$.Field.Name}}" {
  name = "lambda-{{$.Parent}}-{{$.Field.Name}}-${terraform.workspace}"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_policy" "lambda-{{$.Parent}}-{{$.Field.Name}}" {
  name = "lambda-{{$.Parent}}-{{$.Field.Name}}-${terraform.workspace}"
  path = "/"

  policy = data.aws_iam_policy_document.lambda-{{$.Parent}}-{{$.Field.Name}}.json
}

resource "aws_iam_role_policy_attachment" "lambda-{{$.Parent}}-{{$.Field.Name}}" {
  policy_arn = aws_iam_policy.lambda-{{$.Parent}}-{{$.Field.Name}}.arn
  role       = aws_iam_role.lambda-{{$.Parent}}-{{$.Field.Name}}.name
}

resource "aws_iam_role_policy_attachment" "lambda-{{$.Parent}}-{{$.Field.Name}}-basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda-{{$.Parent}}-{{$.Field.Name}}.name
}

data "archive_file" "lambda-{{$.Parent}}-{{$.Field.Name}}-source" {
  type        = "zip"
  output_path = "${path.module}/lambda/build/src/{{$.Directive.Arg "path"}}.zip"
  source_dir  = "${path.module}/lambda/{{$.Directive.Arg "path"}}/"
}

resource "null_resource" "lambda-{{$.Parent}}-{{$.Field.Name}}-compile" {
  triggers = {
    source_hash = data.archive_file.lambda-{{$.Parent}}-{{$.Field.Name}}-source.output_base64sha256
    lib_hash = var.lib-hash
    always_run = timestamp()
  }

  provisioner "local-exec" {
    working_dir = "${path.module}/lambda/{{$.Directive.Arg "path"}}/"
    environment = {
      GOOS    = "linux"
      GOARCH  = "arm64"
      GOFLAGS = "-trimpath"
    }
    command = "go build -ldflags \"-X lib/config.Env=${terraform.workspace}\" -o ../build/${terraform.workspace}/{{$.Directive.Arg "path"}}/bootstrap -trimpath ."
  }
}

data "archive_file" "lambda-{{$.Parent}}-{{$.Field.Name}}" {
  type        = "zip"
  output_path = "${path.module}/lambda/build/${terraform.workspace}/{{$.Directive.Arg "path"}}_${terraform.workspace}.zip"
  source_file = "${path.module}/lambda/build/${terraform.workspace}/{{$.Directive.Arg "path"}}/bootstrap"

  depends_on = [
    null_resource.lambda-{{$.Parent}}-{{$.Field.Name}}-compile
  ]
}

resource "aws_lambda_function" "{{$.Parent}}-{{$.Field.Name}}" {
  function_name = "{{$.Parent}}_{{$.Field.Name}}_${terraform.workspace}"
  role          = aws_iam_role.lambda-{{$.Parent}}-{{$.Field.Name}}.arn

  runtime       = "provided.al2"
  architectures = ["arm64"]
  timeout       = {{$.Directive.ArgHCL "timeout"}}
  memory_size   = {{$.Directive.ArgHCL "memory"}}

  handler = "{{$.Field.Name}}"

  filename         = data.archive_file.lambda-{{$.Parent}}-{{$.Field.Name}}.output_path
  source_code_hash = data.archive_file.lambda-{{$.Parent}}-{{$.Field.Name}}.output_base64sha256

  environment {
    variables = {
      ENVIRONMENT : terraform.workspace
    }
  }
}

resource "aws_appsync_datasource" "{{$.Field.Name}}" {
  api_id           = aws_appsync_graphql_api.backend.id
  name             = "{{$.Field.Name}}_${terraform.workspace}"
  service_role_arn = aws_iam_role.appsync-lambda-{{$.Parent}}-{{$.Field.Name}}.arn
  type             = "AWS_LAMBDA"

  lambda_config {
    function_arn = aws_lambda_function.{{$.Parent}}-{{$.Field.Name}}.arn
  }
}

resource "aws_appsync_resolver" "{{$.Parent}}-{{$.Field.Name}}" {
  api_id      = aws_appsync_graphql_api.backend.id
  type        = "{{$.Parent}}"
  field       = "{{$.Field.Name}}"
  data_source = aws_appsync_datasource.{{$.Field.Name}}.name

  request_template = <<EOF
{
    "version" : "2017-02-28",
    "operation" : "Invoke",
    "payload" : {
        "arguments": $utils.toJson($context.arguments),
        "identity": $utils.toJson($context.identity)
    }
}
EOF

  response_template = <<EOF
    $utils.toJson($context.result)
EOF
}