

resource "aws_iam_role" "appsync-dynamo-{{$.base.dynamo.name}}" {
  name = "appsync-dynamo-{{$.base.dynamo.name}}-${terraform.workspace}"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "appsync.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "appsync-dynamo-{{$.base.dynamo.name}}" {
  name = "appsync-dynamo-{{$.base.dynamo.name}}-${terraform.workspace}"
  role = aws_iam_role.appsync-dynamo-{{$.base.dynamo.name}}.id

  policy = data.aws_iam_policy_document.appsync-dynamo-{{$.base.dynamo.name}}.json
}

data "aws_iam_policy_document" "appsync-dynamo-{{$.base.dynamo.name}}" {
  statement {
    effect = "Allow"
    actions = [
      "dynamodb:GetItem",
      "dynamodb:UpdateItem",
      "dynamodb:DeleteItem",
      "dynamodb:BatchGetItem",
      "dynamodb:BatchWriteItem",
      "dynamodb:PutItem",
      "dynamodb:Scan",
      "dynamodb:Query",
    ]
    resources = [
      aws_dynamodb_table.{{$.base.dynamo.name}}.arn,
      "${aws_dynamodb_table.{{$.base.dynamo.name}}.arn}/*",
    ]
  }
}

resource "aws_dynamodb_table" "{{$.base.dynamo.name}}" {
    name         = "{{$.base.dynamo.name}}-${terraform.workspace}"
    billing_mode = "PAY_PER_REQUEST"
    hash_key     = "{{$.base.dynamo.hash_key}}"
{{- if $.base.has_sort}}
    range_key    = "{{$.base.dynamo.sort_key}}"
{{end}}

{{- range $name, $type := $.base.attributes}}
    attribute {
        name = "{{$name}}"
        type = "{{$type}}"
    }
{{- end}}

{{- range $index, $gsi := $.base.gsis}}
    global_secondary_index {
        name            = "{{$gsi.name}}"
        hash_key        = "{{$gsi.hash_key}}"
        {{- if $gsi.sort_key}}
        range_key       = "{{$gsi.sort_key}}"
        {{- end}}
        projection_type = "ALL"
    }
{{- end}}

    point_in_time_recovery {
        enabled = true
    }

    lifecycle {
        prevent_destroy = true
    }
}

resource "aws_appsync_datasource" "{{$.base.dynamo.name}}" {
  name             = "{{$.base.object}}_${terraform.workspace}"
  api_id           = aws_appsync_graphql_api.backend.id
  service_role_arn = aws_iam_role.appsync-dynamo-{{$.base.dynamo.name}}.arn
  type             = "AMAZON_DYNAMODB"

  dynamodb_config {
    table_name = aws_dynamodb_table.{{$.base.dynamo.name}}.name
  }

  lifecycle {
    ignore_changes = [name]
  }
}
