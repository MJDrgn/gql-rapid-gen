
resource "aws_appsync_resolver" "{{$.Object.Name}}-{{$.Field.Name}}" {
  api_id      = aws_appsync_graphql_api.backend.id
  type        = "{{$.Object.Name}}"
  field       = "{{$.Field.Name}}"
  data_source = aws_appsync_datasource.{{$.Table}}.name

  request_template = <<EOF
#if($util.isNullOrEmpty($context.source.{{$.FieldSource.Name}}))
    #return
#end
{{- if $.Security }}
#if({{$.Security.MatchField.NormaliseVTL (print "$context.source." $.Security.MatchField.Name)}} == {{$.Security.MatchField.NormaliseVTL (print "$context.identity.claims[\"" $.Security.UserClaim "\"]")}} {{- if $.Security.OverrideGroups}} {{- range $.Security.OverrideGroups}} || $ctx.identity.claims["cognito:groups"].contains("{{.}}") {{- end}} {{- end}})
{{- end }}
{
    "version": "2017-02-28",
    "operation": "GetItem",
    "key": {
        "{{$.FieldForeign}}": $util.dynamodb.toDynamoDBJson({{$.FieldSource.NormaliseVTL (print "$context.source." $.FieldSource.Name)}}),
{{- if $.AdditionalFieldSource }}
        "{{$.AdditionalFieldForeign}}": $util.dynamodb.toDynamoDBJson({{$.AdditionalFieldSource.NormaliseVTL (print "$context.source." $.AdditionalFieldSource.Name)}}),
{{- end }}
    },
{{- if $.Index }}
    "index": "{{$.Index}}",
{{- end }}
}
{{- if $.Security }}
#else
  $utils.unauthorized()
#end
{{- end }}
EOF

  response_template = <<EOF
$util.toJson($ctx.result)
EOF
}
