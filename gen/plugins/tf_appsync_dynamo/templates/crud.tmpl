
{{- if not $.crud.disable_read }}
resource "aws_appsync_resolver" "Query-get{{$.base.object}}" {
  api_id      = aws_appsync_graphql_api.backend.id
  type        = "Query"
  field       = "get{{$.base.object}}"
  data_source = aws_appsync_datasource.{{$.base.dynamo.name}}.name

  request_template = <<EOF
{
    "version": "2017-02-28",
    "operation": "GetItem",
    "key": {
        "{{$.base.dynamo.hash_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.{{$.base.dynamo.hash_key}}),
{{- if $.base.has_sort}}
        "{{$.base.dynamo.sort_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.{{$.base.dynamo.sort_key}}),
{{- end}}
    }
}
EOF

  response_template = <<EOF
$util.toJson($ctx.result)
EOF
}
{{- end }}

{{- if not $.crud.disable_create }}
resource "aws_appsync_resolver" "Mutation-create{{$.base.object}}" {
  api_id      = aws_appsync_graphql_api.backend.id
  type        = "Mutation"
  field       = "create{{$.base.object}}"
  data_source = aws_appsync_datasource.{{$.base.dynamo.name}}.name

  request_template = <<EOF
{
    "version" : "2017-02-28",
    "operation" : "PutItem",
    "key": {
{{- if eq $.crud.create_hash_type "uuid" }}
        "{{$.base.dynamo.hash_key}}": $util.dynamodb.toDynamoDBJson($util.autoId()),
{{- else if eq $.crud.create_hash_type "timestamp" }}
        "{{$.base.dynamo.hash_key}}": $util.dynamodb.toDynamoDBJson($util.time.nowEpochSeconds()),
{{- else }}
        "{{$.base.dynamo.hash_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.input.{{$.base.dynamo.hash_key}}),
{{- end }}
{{- if $.base.has_sort}}
    {{- if eq $.crud.create_sort_type "uuid" }}
        "{{$.base.dynamo.sort_key}}": $util.dynamodb.toDynamoDBJson($util.autoId()),
    {{- else if eq $.crud.create_sort_type "timestamp" }}
        "{{$.base.dynamo.sort_key}}": $util.dynamodb.toDynamoDBJson($util.time.nowEpochSeconds()),
    {{- else }}
        "{{$.base.dynamo.sort_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.input.{{$.base.dynamo.sort_key}}),
    {{- end }}
{{- end}}
    },
    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.input)
}
EOF

  response_template = <<EOF
$util.toJson($ctx.result)
EOF
}
{{- end }}

{{- if not $.crud.disable_update }}
resource "aws_appsync_resolver" "Mutation-update{{$.base.object}}" {
  api_id      = aws_appsync_graphql_api.backend.id
  type        = "Mutation"
  field       = "update{{$.base.object}}"
  data_source = aws_appsync_datasource.{{$.base.dynamo.name}}.name

  request_template = <<EOF
{
    "version" : "2017-02-28",
    "operation" : "PutItem",
    "key": {
        "{{$.base.dynamo.hash_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.input.{{$.base.dynamo.hash_key}}),
{{- if $.base.has_sort}}
        "{{$.base.dynamo.sort_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.input.{{$.base.dynamo.sort_key}}),
{{- end}}
    },
    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.input)
}
EOF

  response_template = <<EOF
$util.toJson($ctx.result)
EOF
}
{{- end }}

{{- if not $.crud.disable_delete }}
resource "aws_appsync_resolver" "Mutation-delete{{$.base.object}}" {
  api_id      = aws_appsync_graphql_api.backend.id
  type        = "Mutation"
  field       = "delete{{$.base.object}}"
  data_source = aws_appsync_datasource.{{$.base.dynamo.name}}.name

  request_template = <<EOF
{
    "version" : "2017-02-28",
    "operation" : "DeleteItem",
    "key": {
        "{{$.base.dynamo.hash_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.input.{{$.base.dynamo.hash_key}}),
{{- if $.base.has_sort}}
        "{{$.base.dynamo.sort_key}}": $util.dynamodb.toDynamoDBJson($ctx.args.input.{{$.base.dynamo.sort_key}}),
{{- end}}
    }
}
EOF

  response_template = <<EOF
$util.toJson($ctx.result)
EOF
}
{{- end }}
