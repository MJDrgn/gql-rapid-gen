type {{$.Object.NameCamel}}ProviderBase interface {

{{- if $.HasSort}}
    Get{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}, {{$.SortKey.NameCamel}} {{$.SortKey.Type.GoType}}) (ret *{{$.Object.NameTitle}}, err error)
{{- else}}
    Get{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}) (ret *{{$.Object.NameTitle}}, err error)
{{- end}}
    Put{{$.Object.NameTitle}}(ctx context.Context, {{$.Object.NameCamel}} *{{$.Object.NameTitle}}) error
    GetPut({{$.Object.NameCamel}} *{{$.Object.NameTitle}}) (put *types.Put, err error)
{{- if $.HasSort}}
    Delete{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}, {{$.SortKey.NameCamel}} {{$.SortKey.Type.GoType}}) error
{{- else}}
    Delete{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}) error
{{- end}}
    Scan{{$.Object.NameTitle}}(ctx context.Context) (ret []*{{$.Object.NameTitle}}, err error)
{{- if $.HasSort}}
    BatchGet{{$.Object.NameTitle}}(ctx context.Context, rows []BatchGetInput{{$.Object.NameTitle}}) (ret []*{{$.Object.NameTitle}}, err error)
    BatchGet{{$.Object.NameTitle}}By{{$.HashKey.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}, rows []{{$.SortKey.Type.GoType}}) (ret []*{{$.Object.NameTitle}}, err error)
{{- else}}
    BatchGet{{$.Object.NameTitle}}(ctx context.Context, rows []{{$.HashKey.Type.GoType}}) (ret []*{{$.Object.NameTitle}}, err error)
{{- end}}
{{- if $.HasSort}}
    List{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoTypeRequired}}) (ret []*{{$.Object.NameTitle}}, err error)
{{- end}}
{{-  if $.GSIs }}
    {{-  range $gsi := $.GSIs }}
        {{-  if and ($gsi.HasSort) (ne $gsi.HashKey.Name $gsi.Name) }}
            List{{$.Object.NameTitle}}By{{$gsi.NameTitle}}(ctx context.Context, {{$gsi.HashKey.NameCamel}} {{$gsi.HashKey.Type.GoTypeRequired}}, {{$gsi.SortKey.NameCamel}} {{$gsi.SortKey.Type.GoTypeRequired}}) (ret []*{{$.Object.NameTitle}}, err error)
        {{- end}}
        List{{$.Object.NameTitle}}By{{$gsi.HashKey.NameTitle}}(ctx context.Context, {{$gsi.HashKey.NameCamel}} {{$gsi.HashKey.Type.GoTypeRequired}}) (ret []*{{$.Object.NameTitle}}, err error)
    {{- end}}
{{- end}}
}

type {{$.Object.NameTitle}}Impl struct {
    db *dynamodb.Client
}

var {{$.Object.NameCamel}}ProviderSingleton {{$.Object.NameTitle}}Provider

func init{{$.Object.NameTitle}}Provider(db *dynamodb.Client) {
    {{$.Object.NameCamel}}ProviderSingleton = &{{$.Object.NameTitle}}Impl{
        db: db,
    }
}

func Get{{$.Object.NameTitle}}Provider() {{$.Object.NameTitle}}Provider {
    return {{$.Object.NameCamel}}ProviderSingleton
}

func ({{$.Object.NameCamel}} *{{$.Object.NameTitle}}) key() map[string]types.AttributeValue {
    return map[string]types.AttributeValue{
        "{{$.HashKey.Name}}": &types.AttributeValueMember{{$.HashKey.Type.DynamoType}} {
            {{- if eq $.HashKey.Type.DynamoType "S"}}
            Value: {{$.Object.NameCamel}}.{{$.HashKey.NameTitle}},
            {{- else}}
            Value: fmt.Sprintf("%d", {{$.Object.NameCamel}}.{{$.HashKey.NameTitle}}),
            {{- end}}
        },
        {{- if $.HasSort}}
        "{{$.SortKey.Name}}": &types.AttributeValueMember{{$.SortKey.Type.DynamoType}} {
            {{- if eq $.SortKey.Type.DynamoType "S"}}
                Value: {{$.Object.NameCamel}}.{{$.SortKey.NameTitle}},
            {{- else}}
                Value: fmt.Sprintf("%d", {{$.Object.NameCamel}}.{{$.SortKey.NameTitle}}),
            {{- end}}
        },
        {{end}}
    }
}

func ({{$.Object.NameCamel}} *{{$.Object.NameTitle}}) GetMapID() string {
{{- if $.HasSort }}
    {{- if eq $.SortKey.Type.DynamoType "S"}}
    return {{$.Object.NameCamel}}.{{$.SortKey.NameTitle}}
    {{- else }}
    return fmt.Sprintf("%d", {{$.Object.NameCamel}}.{{$.SortKey.NameTitle}})
    {{- end }}
{{- else }}
    {{- if eq $.HashKey.Type.DynamoType "S"}}
        return {{$.Object.NameCamel}}.{{$.HashKey.NameTitle}}
    {{- else }}
        return fmt.Sprintf("%d", {{$.Object.NameCamel}}.{{$.HashKey.NameTitle}})
    {{- end }}
{{- end }}
}

func (p *{{$.Object.NameTitle}}Impl) tableName() *string {
    return aws.String("{{$.TableName}}-" + config.Env)
}

//Get{{$.Object.NameTitle}} gets a {{$.Object.NameTitle}} from the database
{{- if $.HasSort}}
func (p *{{$.Object.NameTitle}}Impl) Get{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}, {{$.SortKey.NameCamel}} {{$.SortKey.Type.GoType}}) (ret *{{$.Object.NameTitle}}, err error) {
{{- else}}
func (p *{{$.Object.NameTitle}}Impl) Get{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}) (ret *{{$.Object.NameTitle}}, err error) {
{{- end}}
    result, err := p.db.GetItem(ctx, &dynamodb.GetItemInput{
        TableName: p.tableName(),
        Key: map[string]types.AttributeValue{
            "{{$.HashKey.Name}}": &types.AttributeValueMember{{$.HashKey.Type.DynamoType}} {
                {{- if eq $.HashKey.Type.DynamoType "S"}}
                Value: {{$.HashKey.NameCamel}},
                {{- else}}
                Value: fmt.Sprintf("%d", {{$.HashKey.NameCamel}}),
                {{- end}}
            },
            {{- if $.HasSort}}
            "{{$.SortKey.Name}}": &types.AttributeValueMember{{$.SortKey.Type.DynamoType}} {
                {{- if eq $.SortKey.Type.DynamoType "S"}}
                    Value: {{$.SortKey.NameCamel}},
                {{- else}}
                    Value: fmt.Sprintf("%d", {{$.SortKey.NameCamel}}),
                {{- end}}
            },
            {{end}}
        },
    })
    if err != nil {
        return nil, fmt.Errorf("failed to get {{$.Object.NameTitle}} from table with id %s: %v", {{$.HashKey.NameCamel}}, err)
    }
	if result.Item == nil {
		return nil, nil
	}
    ret = &{{$.Object.NameTitle}}{}

    err = attributevalue.UnmarshalMap(result.Item, ret)
    if err != nil {
        return nil, fmt.Errorf("failed to unmarshal {{$.Object.NameTitle}} from table with id %s: %v", {{$.HashKey.NameCamel}}, err)
    }
    return ret, nil
}

//Put{{$.Object.NameTitle}} puts a {{$.Object.NameTitle}} into the database
func (p *{{$.Object.NameTitle}}Impl) Put{{$.Object.NameTitle}}(ctx context.Context, {{$.Object.NameCamel}} *{{$.Object.NameTitle}}) error {
    if err := {{$.Object.NameCamel}}.Validate(); err != nil {
        return err
    }
    item, err := attributevalue.MarshalMap({{$.Object.NameCamel}})
    if err != nil {
        return fmt.Errorf("failed to marshal {{$.Object.NameTitle}}: %v", err)
    }
    _, err = p.db.PutItem(ctx, &dynamodb.PutItemInput{
        TableName: p.tableName(),
        Item:      item,
    })
    if err != nil {
        return fmt.Errorf("failed to put {{$.Object.NameTitle}} into table: %v", err)
    }
    return nil
}

// GetPut returns a Put entry for a {{$.Object.NameTitle}}
func (p *{{$.Object.NameTitle}}Impl) GetPut({{$.Object.NameCamel}} *{{$.Object.NameTitle}}) (put *types.Put, err error) {
	if err := {{$.Object.NameCamel}}.Validate(); err != nil {
		return nil, err
	}
	item, err := attributevalue.MarshalMap({{$.Object.NameCamel}})
	if err != nil {
		return nil, fmt.Errorf("failed to marshal {{$.Object.NameTitle}}: %v", err)
	}
	return &types.Put{
		TableName: p.tableName(),
		Item:      item,
	}, nil
}

//Delete{{$.Object.NameTitle}} deletes a {{$.Object.NameTitle}} from the database
{{- if $.HasSort}}
func (p *{{$.Object.NameTitle}}Impl) Delete{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}, {{$.SortKey.NameCamel}} {{$.SortKey.Type.GoType}}) error {
{{- else}}
func (p *{{$.Object.NameTitle}}Impl) Delete{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}) error {
{{- end}}
    _, err := p.db.DeleteItem(ctx, &dynamodb.DeleteItemInput{
        TableName: p.tableName(),
        Key: map[string]types.AttributeValue{
            "{{$.HashKey.Name}}": &types.AttributeValueMember{{$.HashKey.Type.DynamoType}} {
            {{- if eq $.HashKey.Type.DynamoType "S"}}
                Value: {{$.HashKey.NameCamel}},
            {{- else}}
                Value: fmt.Sprintf("%d", {{$.HashKey.NameCamel}}),
            {{- end}}
            },
            {{- if $.HasSort}}
                "{{$.SortKey.Name}}": &types.AttributeValueMember{{$.SortKey.Type.DynamoType}} {
                {{- if eq $.SortKey.Type.DynamoType "S"}}
                    Value: {{$.SortKey.NameCamel}},
                {{- else}}
                    Value: fmt.Sprintf("%d", {{$.SortKey.NameCamel}}),
                {{- end}}
                },
            {{end}}
        },
    })
    if err != nil {
        return fmt.Errorf("failed to delete {{$.Object.NameTitle}} from table with id %s: %v", {{$.HashKey.NameCamel}}, err)
    }
    return nil
}

//Scan{{$.Object.NameTitle}} scans the {{$.Object.NameTitle}} table
func (p *{{$.Object.NameTitle}}Impl) Scan{{$.Object.NameTitle}}(ctx context.Context) (ret []*{{$.Object.NameTitle}}, err error) {
    var lastEvaluatedKey map[string]types.AttributeValue
    for {
        scanResp, err := p.db.Scan(ctx, &dynamodb.ScanInput{
            TableName: p.tableName(),
            ExclusiveStartKey: lastEvaluatedKey,
        })
        if err != nil {
            return nil, fmt.Errorf("failed to scan Activity table: %v", err)
        }
        temp := make([]*{{$.Object.NameTitle}}, 0, len(scanResp.Items))
        err = attributevalue.UnmarshalListOfMaps(scanResp.Items, &temp)
        if err != nil {
            return nil, fmt.Errorf("failed to unmarshal {{$.Object.NameTitle}} table: %v", err)
        }
        ret = append(ret, temp...)
        if scanResp.LastEvaluatedKey == nil {
            break
        } else {
            lastEvaluatedKey = scanResp.LastEvaluatedKey
        }
    }
    return ret, nil
}

{{- if $.HasSort}}
//BatchGetInput{{$.Object.NameTitle}} represents the keys to fetch {{$.Object.NameTitle}} from the database
type BatchGetInput{{$.Object.NameTitle}} struct {
    {{$.HashKey.NameTitle}} {{$.HashKey.Type.GoType}}
    {{$.SortKey.NameTitle}} {{$.SortKey.Type.GoType}}
}

//BatchGet{{$.Object.NameTitle}} retrieves multiple {{$.Object.NameTitle}} from the database
func (p *{{$.Object.NameTitle}}Impl) BatchGet{{$.Object.NameTitle}}(ctx context.Context, rows []BatchGetInput{{$.Object.NameTitle}}) (ret []*{{$.Object.NameTitle}}, err error) {
{{- else}}
//BatchGet{{$.Object.NameTitle}} retrieves multiple {{$.Object.NameTitle}} from the database
func (p *{{$.Object.NameTitle}}Impl) BatchGet{{$.Object.NameTitle}}(ctx context.Context, rows []{{$.HashKey.Type.GoType}}) (ret []*{{$.Object.NameTitle}}, err error) {
{{- end}}
    keys := make([]map[string]types.AttributeValue, 0, len(rows))
    for _, val := range rows {
        keys = append(keys, map[string]types.AttributeValue{
            {{- if $.HasSort}}
            "{{$.HashKey.Name}}": &types.AttributeValueMember{{$.HashKey.Type.DynamoType}} {
                {{- if eq $.HashKey.Type.DynamoType "S"}}
                    Value: val.{{$.HashKey.NameTitle}},
                {{- else}}
                    Value: fmt.Sprintf("%d", val.{{$.HashKey.NameTitle}}),
                {{- end}}
            },
            "{{$.SortKey.Name}}": &types.AttributeValueMember{{$.SortKey.Type.DynamoType}} {
                {{- if eq $.SortKey.Type.DynamoType "S"}}
                    Value: val.{{$.SortKey.NameTitle}},
                {{- else}}
                    Value: fmt.Sprintf("%d", val.{{$.SortKey.NameTitle}}),
                {{- end}}
            },
            {{- else}}
            "{{$.HashKey.Name}}": &types.AttributeValueMember{{$.HashKey.Type.DynamoType}} {
                Value: val,
            },
            {{- end}}
        })
    }
    result, err := p.db.BatchGetItem(ctx, &dynamodb.BatchGetItemInput{
        RequestItems: map[string]types.KeysAndAttributes{
            *p.tableName(): {
                Keys: keys,
            },
        },
    })
    if err != nil {
        return nil, fmt.Errorf("failed to batch get {{$.Object.NameTitle}} from table: %v", err)
    }
    ret = make([]*{{$.Object.NameTitle}}, 0, len(result.Responses[*p.tableName()]))
    err = attributevalue.UnmarshalListOfMaps(result.Responses[*p.tableName()], &ret)
    if err != nil {
        return nil, fmt.Errorf("failed to unmarshal from table: %v", err)
    }
    return ret, nil
}

{{- if $.HasSort}}
//BatchGet{{$.Object.NameTitle}}By{{$.HashKey.NameTitle}} retrieves multiple {{$.Object.NameTitle}} from the database with a common {{$.HashKey.NameTitle}}
func (p *{{$.Object.NameTitle}}Impl) BatchGet{{$.Object.NameTitle}}By{{$.HashKey.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoType}}, rows []{{$.SortKey.Type.GoType}}) (ret []*{{$.Object.NameTitle}}, err error) {
    keys := make([]map[string]types.AttributeValue, 0, len(rows))
    for _, val := range rows {
        keys = append(keys, map[string]types.AttributeValue{
            "{{$.HashKey.Name}}": &types.AttributeValueMember{{$.HashKey.Type.DynamoType}} {
                {{- if eq $.HashKey.Type.DynamoType "S"}}
                    Value: {{$.HashKey.NameCamel}},
                {{- else}}
                    Value: fmt.Sprintf("%d", {{$.HashKey.NameCamel}}),
                {{- end}}
            },
            "{{$.SortKey.Name}}": &types.AttributeValueMember{{$.SortKey.Type.DynamoType}} {
                {{- if eq $.SortKey.Type.DynamoType "S"}}
                    Value: val,
                {{- else}}
                    Value: fmt.Sprintf("%d", val),
                {{- end}}
            },
        })
    }
    result, err := p.db.BatchGetItem(ctx, &dynamodb.BatchGetItemInput{
        RequestItems: map[string]types.KeysAndAttributes{
            *p.tableName(): {
                Keys: keys,
            },
        },
    })
    if err != nil {
        return nil, fmt.Errorf("failed to batch get {{$.Object.NameTitle}} from table: %v", err)
    }
    ret = make([]*{{$.Object.NameTitle}}, 0, len(result.Responses[*p.tableName()]))
    err = attributevalue.UnmarshalListOfMaps(result.Responses[*p.tableName()], &ret)
    if err != nil {
        return nil, fmt.Errorf("failed to unmarshal from table: %v", err)
    }
    return ret, nil
}
{{- end }}

{{- if $.HasSort}}
//List{{$.Object.NameTitle}} gets a list of {{$.Object.NameTitle}} from the database using the hash key
func (p *{{$.Object.NameTitle}}Impl) List{{$.Object.NameTitle}}(ctx context.Context, {{$.HashKey.NameCamel}} {{$.HashKey.Type.GoTypeRequired}}) (ret []*{{$.Object.NameTitle}}, err error) {
    var lastEvaluatedKey map[string]types.AttributeValue
    for {
        resp, err := p.db.Query(ctx, &dynamodb.QueryInput{
            TableName: p.tableName(),
            KeyConditions: map[string]types.Condition{
                "{{$.HashKey.Name}}": {
                    ComparisonOperator: types.ComparisonOperatorEq,
                    AttributeValueList: []types.AttributeValue{
    {{if $.HashKey.Type.IsObject}}
                        &types.AttributeValueMemberS{
                            Value: {{$.HashKey.NameCamel}}.String(),
                        },
    {{else}}
                        &types.AttributeValueMember{{$.HashKey.Type.DynamoType}}{
                            Value: {{$.HashKey.NameCamel}},
                        },
    {{end}}
                    },
                },
            },
            ExclusiveStartKey: lastEvaluatedKey,
        })
        if err != nil {
            return nil, fmt.Errorf("failed to query {{$.Object.NameTitle}} table by hash: %v", err)
        }
        temp := make([]*{{$.Object.NameTitle}}, 0, len(resp.Items))
        err = attributevalue.UnmarshalListOfMaps(resp.Items, &temp)
        if err != nil {
            return nil, fmt.Errorf("failed to unmarshal {{$.Object.NameTitle}} table: %v", err)
        }
        ret = append(ret, temp...)
        if resp.LastEvaluatedKey == nil {
            break
        } else {
            lastEvaluatedKey = resp.LastEvaluatedKey
        }
    }
    return ret, nil
}
{{- end}}

{{-  if $.GSIs }}
    {{-  range $gsi := $.GSIs }}
{{-  if and ($gsi.SortKey) (ne $gsi.HashKey.Name $gsi.Name) }}

//List{{$.Object.NameTitle}}By{{$gsi.NameTitle}} gets a list of {{$.Object.NameTitle}} from the database using the {{ $gsi.Name }} GSI
func (p *{{$.Object.NameTitle}}Impl) List{{$.Object.NameTitle}}By{{$gsi.NameTitle}}(ctx context.Context, {{$gsi.HashKey.NameCamel}} {{$gsi.HashKey.Type.GoTypeRequired}}, {{$gsi.SortKey.NameCamel}} {{$gsi.SortKey.Type.GoTypeRequired}}) (ret []*{{$.Object.NameTitle}}, err error) {
    var lastEvaluatedKey map[string]types.AttributeValue
    for {
        resp, err := p.db.Query(ctx, &dynamodb.QueryInput{
            TableName: p.tableName(),
            IndexName: aws.String("{{$gsi.Name}}"),
            KeyConditions: map[string]types.Condition{
                "{{$gsi.HashKey.Name}}": {
                    ComparisonOperator: types.ComparisonOperatorEq,
                    AttributeValueList: []types.AttributeValue{
{{if $gsi.HashKey.Type.IsObject}}
                        &types.AttributeValueMemberS{
                            Value: {{$gsi.HashKey.NameCamel}}.String(),
                        },
{{else}}
                        &types.AttributeValueMember{{$gsi.HashKey.Type.DynamoType}}{
                            Value: {{$gsi.HashKey.NameCamel}},
                        },
{{end}}
                    },
                },
                "{{$gsi.SortKey.Name}}": {
                    ComparisonOperator: types.ComparisonOperatorEq,
                    AttributeValueList: []types.AttributeValue{
{{if $gsi.SortKey.Type.IsObject}}
                        &types.AttributeValueMemberS{
                            Value: {{$gsi.SortKey.NameCamel}}.String(),
                        },
{{else}}
                        &types.AttributeValueMember{{$gsi.SortKey.Type.DynamoType}}{
                            Value: {{$gsi.SortKey.NameCamel}},
                        },
{{end}}
                    },
                },
            },
            ExclusiveStartKey: lastEvaluatedKey,
        })
        if err != nil {
            return nil, fmt.Errorf("failed to query {{$.Object.NameTitle}} table via {{$gsi.Name}} complete: %v", err)
        }
        temp := make([]*{{$.Object.NameTitle}}, 0, len(resp.Items))
        err = attributevalue.UnmarshalListOfMaps(resp.Items, &temp)
        if err != nil {
            return nil, fmt.Errorf("failed to unmarshal {{$.Object.NameTitle}} table: %v", err)
        }
        ret = append(ret, temp...)
        if resp.LastEvaluatedKey == nil {
            break
        } else {
            lastEvaluatedKey = resp.LastEvaluatedKey
        }
    }
    return ret, nil
}

{{- end}}

//List{{$.Object.NameTitle}}By{{$gsi.HashKey.NameTitle}} gets a list of {{$.Object.NameTitle}} from the database using the {{ $gsi.Name }} GSI
func (p *{{$.Object.NameTitle}}Impl) List{{$.Object.NameTitle}}By{{$gsi.HashKey.NameTitle}}(ctx context.Context, {{$gsi.HashKey.NameCamel}} {{$gsi.HashKey.Type.GoTypeRequired}}) (ret []*{{$.Object.NameTitle}}, err error) {
    var lastEvaluatedKey map[string]types.AttributeValue
    for {
        resp, err := p.db.Query(ctx, &dynamodb.QueryInput{
            TableName: p.tableName(),
            IndexName: aws.String("{{$gsi.Name}}"),
            KeyConditions: map[string]types.Condition{
                "{{$gsi.HashKey.Name}}": {
                    ComparisonOperator: types.ComparisonOperatorEq,
                    AttributeValueList: []types.AttributeValue{
{{if $gsi.HashKey.Type.IsObject}}
                        &types.AttributeValueMemberS{
                            Value: {{$gsi.HashKey.NameCamel}}.String(),
                        },
{{else}}
                        &types.AttributeValueMember{{$gsi.HashKey.Type.DynamoType}}{
                            Value: {{$gsi.HashKey.NameCamel}},
                        },
{{end}}
                    },
                },
            },
            ExclusiveStartKey: lastEvaluatedKey,
        })
        if err != nil {
            return nil, fmt.Errorf("failed to query {{$.Object.NameTitle}} table via {{$gsi.Name}} complete: %v", err)
        }
        temp := make([]*{{$.Object.NameTitle}}, 0, len(resp.Items))
        err = attributevalue.UnmarshalListOfMaps(resp.Items, &temp)
        if err != nil {
            return nil, fmt.Errorf("failed to unmarshal {{$.Object.NameTitle}} table: %v", err)
        }
        ret = append(ret, temp...)
        if resp.LastEvaluatedKey == nil {
            break
        } else {
            lastEvaluatedKey = resp.LastEvaluatedKey
        }
    }
    return ret, nil
}
{{- end}}
{{- end}}